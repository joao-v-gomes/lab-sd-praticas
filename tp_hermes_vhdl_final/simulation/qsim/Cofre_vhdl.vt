// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/17/2022 16:00:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Cofre_vhdl
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Cofre_vhdl_vlg_sample_tst(
	C_D1,
	C_D2,
	C_D3,
	C_L1,
	C_L2,
	C_L3,
	D1,
	D2,
	D3,
	L1,
	L2,
	L3,
	sampler_tx
);
input [3:0] C_D1;
input [3:0] C_D2;
input [3:0] C_D3;
input [4:0] C_L1;
input [4:0] C_L2;
input [4:0] C_L3;
input [3:0] D1;
input [3:0] D2;
input [3:0] D3;
input [4:0] L1;
input [4:0] L2;
input [4:0] L3;
output sampler_tx;

reg sample;
time current_time;
always @(C_D1 or C_D2 or C_D3 or C_L1 or C_L2 or C_L3 or D1 or D2 or D3 or L1 or L2 or L3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Cofre_vhdl_vlg_check_tst (
	Cofre,
	Led_Amarelo,
	Led_Verde,
	Led_Vermelho,
	Xa,
	Xb,
	Xc,
	sampler_rx
);
input  Cofre;
input  Led_Amarelo;
input  Led_Verde;
input  Led_Vermelho;
input  Xa;
input  Xb;
input  Xc;
input sampler_rx;

reg  Cofre_expected;
reg  Led_Amarelo_expected;
reg  Led_Verde_expected;
reg  Led_Vermelho_expected;
reg  Xa_expected;
reg  Xb_expected;
reg  Xc_expected;

reg  Cofre_prev;
reg  Led_Amarelo_prev;
reg  Led_Verde_prev;
reg  Led_Vermelho_prev;
reg  Xa_prev;
reg  Xb_prev;
reg  Xc_prev;

reg  Xa_expected_prev;
reg  Xb_expected_prev;
reg  Xc_expected_prev;

reg  last_Xa_exp;
reg  last_Xb_exp;
reg  last_Xc_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	Cofre_prev = Cofre;
	Led_Amarelo_prev = Led_Amarelo;
	Led_Verde_prev = Led_Verde;
	Led_Vermelho_prev = Led_Vermelho;
	Xa_prev = Xa;
	Xb_prev = Xb;
	Xc_prev = Xc;
end

// update expected /o prevs

always @(trigger)
begin
	Xa_expected_prev = Xa_expected;
	Xb_expected_prev = Xb_expected;
	Xc_expected_prev = Xc_expected;
end



// expected Xa
initial
begin
	Xa_expected = 1'bX;
end 

// expected Xb
initial
begin
	Xb_expected = 1'bX;
end 

// expected Xc
initial
begin
	Xc_expected = 1'bX;
end 
// generate trigger
always @(Cofre_expected or Cofre or Led_Amarelo_expected or Led_Amarelo or Led_Verde_expected or Led_Verde or Led_Vermelho_expected or Led_Vermelho or Xa_expected or Xa or Xb_expected or Xb or Xc_expected or Xc)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Cofre = %b | expected Led_Amarelo = %b | expected Led_Verde = %b | expected Led_Vermelho = %b | expected Xa = %b | expected Xb = %b | expected Xc = %b | ",Cofre_expected_prev,Led_Amarelo_expected_prev,Led_Verde_expected_prev,Led_Vermelho_expected_prev,Xa_expected_prev,Xb_expected_prev,Xc_expected_prev);
	$display("| real Cofre = %b | real Led_Amarelo = %b | real Led_Verde = %b | real Led_Vermelho = %b | real Xa = %b | real Xb = %b | real Xc = %b | ",Cofre_prev,Led_Amarelo_prev,Led_Verde_prev,Led_Vermelho_prev,Xa_prev,Xb_prev,Xc_prev);
`endif
	if (
		( Xa_expected_prev !== 1'bx ) && ( Xa_prev !== Xa_expected_prev )
		&& ((Xa_expected_prev !== last_Xa_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xa :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xa_expected_prev);
		$display ("     Real value = %b", Xa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Xa_exp = Xa_expected_prev;
	end
	if (
		( Xb_expected_prev !== 1'bx ) && ( Xb_prev !== Xb_expected_prev )
		&& ((Xb_expected_prev !== last_Xb_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xb :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xb_expected_prev);
		$display ("     Real value = %b", Xb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Xb_exp = Xb_expected_prev;
	end
	if (
		( Xc_expected_prev !== 1'bx ) && ( Xc_prev !== Xc_expected_prev )
		&& ((Xc_expected_prev !== last_Xc_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xc_expected_prev);
		$display ("     Real value = %b", Xc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Xc_exp = Xc_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Cofre_vhdl_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] C_D1;
reg [3:0] C_D2;
reg [3:0] C_D3;
reg [4:0] C_L1;
reg [4:0] C_L2;
reg [4:0] C_L3;
reg [3:0] D1;
reg [3:0] D2;
reg [3:0] D3;
reg [4:0] L1;
reg [4:0] L2;
reg [4:0] L3;
// wires                                               
wire Cofre;
wire Led_Amarelo;
wire Led_Verde;
wire Led_Vermelho;
wire Xa;
wire Xb;
wire Xc;

wire sampler;                             

// assign statements (if any)                          
Cofre_vhdl i1 (
// port map - connection between master ports and signals/registers   
	.C_D1(C_D1),
	.C_D2(C_D2),
	.C_D3(C_D3),
	.C_L1(C_L1),
	.C_L2(C_L2),
	.C_L3(C_L3),
	.Cofre(Cofre),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.Led_Amarelo(Led_Amarelo),
	.Led_Verde(Led_Verde),
	.Led_Vermelho(Led_Vermelho),
	.Xa(Xa),
	.Xb(Xb),
	.Xc(Xc)
);
// C_D1[ 3 ]
initial
begin
	C_D1[3] = 1'b0;
end 
// C_D1[ 2 ]
initial
begin
	C_D1[2] = 1'b0;
end 
// C_D1[ 1 ]
initial
begin
	C_D1[1] = 1'b0;
end 
// C_D1[ 0 ]
initial
begin
	C_D1[0] = 1'b1;
end 
// C_D2[ 3 ]
initial
begin
	C_D2[3] = 1'b0;
end 
// C_D2[ 2 ]
initial
begin
	C_D2[2] = 1'b0;
end 
// C_D2[ 1 ]
initial
begin
	C_D2[1] = 1'b1;
end 
// C_D2[ 0 ]
initial
begin
	C_D2[0] = 1'b0;
end 
// C_D3[ 3 ]
initial
begin
	C_D3[3] = 1'b0;
end 
// C_D3[ 2 ]
initial
begin
	C_D3[2] = 1'b0;
end 
// C_D3[ 1 ]
initial
begin
	C_D3[1] = 1'b1;
end 
// C_D3[ 0 ]
initial
begin
	C_D3[0] = 1'b1;
end 
// C_L1[ 4 ]
initial
begin
	C_L1[4] = 1'b0;
end 
// C_L1[ 3 ]
initial
begin
	C_L1[3] = 1'b0;
end 
// C_L1[ 2 ]
initial
begin
	C_L1[2] = 1'b0;
end 
// C_L1[ 1 ]
initial
begin
	C_L1[1] = 1'b0;
end 
// C_L1[ 0 ]
initial
begin
	C_L1[0] = 1'b1;
end 
// C_L2[ 4 ]
initial
begin
	C_L2[4] = 1'b0;
end 
// C_L2[ 3 ]
initial
begin
	C_L2[3] = 1'b0;
end 
// C_L2[ 2 ]
initial
begin
	C_L2[2] = 1'b0;
end 
// C_L2[ 1 ]
initial
begin
	C_L2[1] = 1'b1;
end 
// C_L2[ 0 ]
initial
begin
	C_L2[0] = 1'b0;
end 
// C_L3[ 4 ]
initial
begin
	C_L3[4] = 1'b0;
end 
// C_L3[ 3 ]
initial
begin
	C_L3[3] = 1'b0;
end 
// C_L3[ 2 ]
initial
begin
	C_L3[2] = 1'b0;
end 
// C_L3[ 1 ]
initial
begin
	C_L3[1] = 1'b1;
end 
// C_L3[ 0 ]
initial
begin
	C_L3[0] = 1'b1;
end 
// D1[ 3 ]
initial
begin
	D1[3] = 1'b0;
end 
// D1[ 2 ]
initial
begin
	D1[2] = 1'b0;
end 
// D1[ 1 ]
initial
begin
	D1[1] = 1'b0;
end 
// D1[ 0 ]
initial
begin
	D1[0] = 1'b1;
end 
// D2[ 3 ]
initial
begin
	D2[3] = 1'b0;
end 
// D2[ 2 ]
initial
begin
	D2[2] = 1'b0;
end 
// D2[ 1 ]
initial
begin
	D2[1] = 1'b1;
end 
// D2[ 0 ]
initial
begin
	D2[0] = 1'b0;
end 
// D3[ 3 ]
initial
begin
	D3[3] = 1'b0;
end 
// D3[ 2 ]
initial
begin
	D3[2] = 1'b0;
end 
// D3[ 1 ]
initial
begin
	D3[1] = 1'b1;
end 
// D3[ 0 ]
initial
begin
	D3[0] = 1'b1;
end 
// L1[ 4 ]
initial
begin
	L1[4] = 1'b0;
end 
// L1[ 3 ]
initial
begin
	L1[3] = 1'b0;
end 
// L1[ 2 ]
initial
begin
	L1[2] = 1'b0;
end 
// L1[ 1 ]
initial
begin
	L1[1] = 1'b0;
end 
// L1[ 0 ]
initial
begin
	L1[0] = 1'b1;
end 
// L2[ 4 ]
initial
begin
	L2[4] = 1'b0;
end 
// L2[ 3 ]
initial
begin
	L2[3] = 1'b0;
end 
// L2[ 2 ]
initial
begin
	L2[2] = 1'b0;
end 
// L2[ 1 ]
initial
begin
	L2[1] = 1'b1;
end 
// L2[ 0 ]
initial
begin
	L2[0] = 1'b0;
end 
// L3[ 4 ]
initial
begin
	L3[4] = 1'b0;
end 
// L3[ 3 ]
initial
begin
	L3[3] = 1'b0;
end 
// L3[ 2 ]
initial
begin
	L3[2] = 1'b0;
end 
// L3[ 1 ]
initial
begin
	L3[1] = 1'b1;
end 
// L3[ 0 ]
initial
begin
	L3[0] = 1'b1;
end 

Cofre_vhdl_vlg_sample_tst tb_sample (
	.C_D1(C_D1),
	.C_D2(C_D2),
	.C_D3(C_D3),
	.C_L1(C_L1),
	.C_L2(C_L2),
	.C_L3(C_L3),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.sampler_tx(sampler)
);

Cofre_vhdl_vlg_check_tst tb_out(
	.Cofre(Cofre),
	.Led_Amarelo(Led_Amarelo),
	.Led_Verde(Led_Verde),
	.Led_Vermelho(Led_Vermelho),
	.Xa(Xa),
	.Xb(Xb),
	.Xc(Xc),
	.sampler_rx(sampler)
);
endmodule

